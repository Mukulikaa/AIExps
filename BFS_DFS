// BFS

graph = {
    '5': ['3', '7'],
    '3': ['2', '4'],
    '7': ['8'],
    '2': [],
    '4': ['8'],
    '8': []
}
visited = []
queue = []
def bfs(visited, graph, node):
    visited.append(node)
    queue.append(node)
    while queue:
        m = queue.pop(0)
        print(m, end="->")
        for neighbour in graph[m]:
            if neighbour not in visited:
                visited.append(neighbour)
                queue.append(neighbour)
print("Available nodes :",end =" ")
for a in graph.keys():
    print(a, end=" ")
starting_node = input("\nEnter the Starting node: ")
print("Following is the Breadth-First Search")
bfs(visited, graph, starting_node)

// DFS

graph = {
  '5' : ['3','7'],
  '3' : ['2', '4'],
  '7' : ['8'],
  '2' : [],
  '4' : ['8'],
  '8' : []
}

visited = set()
def dfs(visited, graph, node):  
    if node not in visited:
        print (node,end=' => ')
        visited.add(node)
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)

print("Available nodes :",end =" ")
for a in graph.keys():
    print(a, end=" ")
starting_node = input("\nEnter the Starting node: ")
print("Following is the Depth-First Search")
dfs(visited, graph, starting_node)
